#!/usr/bin/python
"""Print prediction results of all instances of a test set
"""
import arff  # ARFF module
import optparse
import math
import DT_classifier

if __name__ == "__main__":

    # Parse arguments
    parser = optparse.OptionParser()
    options, args = parser.parse_args()
    assert len(args) == 3

    # First positional argument: name of training set file
    # Second positional argument: name of test set file
    # Third positional argument: number of minimum instances to allow a node to
    # split
    train_filename, test_filename, min_instances = args
    min_instances = int(min_instances)  # Cast to integer

    #################### Declare inputs for learning #################### 

    # Load ARFF file
    data, metadata = arff.loadarff(train_filename)

    # Change data to Python native list of lists
    #data_list = [[x for x in list_] for list_ in data]
    data_list = [list_ for list_ in data]

    # Length n+1 list of booleans for whether each feature is norminal
    # Feature is numeric if it's not norminal
    # The additional 1 is the class feature type
    norminalities = [type_ == 'nominal' for type_ in metadata.types()]

    # enumeration i is a tuple of all possible values of feature i
    value_enumerations = []
    for name in metadata.names():
        norminality, value_enumeration = metadata[name]
        value_enumerations.append(value_enumeration)

    #################### Learn decision tree #################### 

    training_set = data_list

    # Instantiate tree learner
    classifier = DT_classifier.DT_classifier(training_set, norminalities,
            value_enumerations, min_instances)

    # Fit classifer
    classifier.fit()

    #################### Perform prediction on test set  #################### 

    # Get test set
    testset, metadata = arff.loadarff(test_filename)
    testset = [list_ for list_ in testset]

    # Get predictions
    predictions = [classifier.predict(instance) for instance in testset]

    #################### Print results  #################### 

    print "TREE LEARNT FROM TRAINING SET"
    print 40 * '-'
    classifier.print_tree(metadata.names())

    print '\n'

    print "PREDICTIONS FOR TEST SET INSTANCES (predicted & actual label)"
    print 40 * '-'
    actual_labels = [instance[-1] for instance in testset]
    column_width = max([len(label) for label in actual_labels + predictions])
    for predicted, actual in zip(predictions, actual_labels):
        print  (2 * ('%' + str(column_width) + 's ')) % (predicted, actual)

    # Print number of correct classifications and number of test instances
    #"This should be followed by a line listing the number of correctly
    #classified test instances, and the total number of instances in the test
    #set".
    n_correct_predictions = sum([predicted == actual
        for predicted, actual in zip(predictions, actual_labels)])
    print "Number of correct classifications = %i | test set size = %i" %  \
            (n_correct_predictions, len(testset))
